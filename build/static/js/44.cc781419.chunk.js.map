{"version":3,"sources":["components/Machine/CRUD/Edit.js"],"names":["EditMachine","props","swalCallback","history","push","toggleStep","activeStep","form","formMachineRef","tabPane","document","getElementById","state","inputs","slice","call","querySelectorAll","FormValidator","bulkValidate","errors","hasError","setState","name","progressValue","console","log","getModele","axios","get","url_modeles","then","res","modeles","data","isLoading","catch","error","getMachine","id","url_machines","machine","selectedModele","modele","libelle","nom","zone","createdAt","level","status","localite","coordonnees","Object","pays","rue","ville","quartier","latitude","longitude","formMachine","key","path","label","value","swal","editMachine","id_modele","put","docRef","validateOnChange","event","input","target","type","checked","result","validate","find","formName","inputName","method","handleSubmit","e","elements","filter","i","includes","nodeName","preventDefault","isFinish","formRef","node","unsubscribe","isUpdated","swalSuccess","title","text","icon","swalError","this","match","params","Component"],"mappings":"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","file":"static/js/44.cc781419.chunk.js","sourcesContent":["/**editer les informations d'une machine */\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {url_machines, url_modeles} from '../../../urls'\r\nimport ContentWrapper from '../Layout/ContentWrapper';\r\nimport FormValidator from '../../Common/FormValidator';\r\nimport Machine from './AddUpMachine';\r\nimport HeadingMenu from '../HeadingMenu';\r\nimport swal from 'sweetalert';\r\n\r\nclass EditMachine extends Component {\r\n    constructor(props) {\r\n        super(props);        \r\n        //this.refModele = firebase.firestore().collection('modeles');\r\n        this.unsubscribe = null;\r\n        this.state = {\r\n            formMachine : {\r\n                nom: '',\r\n                zone: '',\r\n                level: '',\r\n                status: '',\r\n                pays: '',\r\n                ville:'',\r\n                quartier:'',\r\n                rue:'',\r\n                libelle:'',\r\n                latitude: '',\r\n                longitude: '',\r\n                key: ''\r\n            },\r\n            createdAt: '',\r\n            modeles: [],\r\n            isLoading: true,\r\n            isUpdated: false,\r\n            isFinish : false,\r\n            selectedModele: {},\r\n            activeStep: '1',\r\n            progressValue: [100, 0, 0],\r\n            path: [\r\n                { \r\n                    label: 'Home',\r\n                    value: '/dashboard_machine',\r\n                },\r\n                { \r\n                    label: 'Machine',\r\n                    value: '/list_machine',\r\n                },\r\n                { \r\n                    label: 'Editer',\r\n                    value: '',\r\n                }\r\n            ],\r\n\r\n            swalSuccess: {\r\n                title: \"Good Job\",\r\n                text: \"Les modifications apportées à la machine ont été prise en compte !\",\r\n                icon: \"success\"\r\n            },\r\n            swalError: {\r\n                title: \"Désolé...\",\r\n                text: \"Les modifications n'ont pas été effectuées\",\r\n                icon: \"danger\"\r\n            }\r\n        };\r\n    }\r\n\r\n    swalCallback = () => {\r\n        this.props.history.push(\"/list_machine/\")\r\n    }\r\n\r\n    toggleStep = activeStep => () => {\r\n        // For submit we can obtain the form from the event\r\n        // but for each step we need a global ref to the element\r\n        const form = this.formMachineRef;\r\n        // To validate only the inputs in the current steps, we use an id to query the tabPane\r\n        // and then find all form elements for the current step only.\r\n        const tabPane = document.getElementById('tabPane' + this.state.activeStep);\r\n        const inputs = [].slice.call(tabPane.querySelectorAll('input,select'));\r\n        // Run validation of inputs\r\n        const { errors, hasError } = FormValidator.bulkValidate(inputs);\r\n\r\n        // Update state so the validation message are shown/hidden\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        // and prevent change the if form is not valid\r\n        if (!hasError) {\r\n            const progessValue1 = [100, 0, 0];\r\n            const progessValue2 = [0, 100, 0];\r\n            const progessValue3 = [0, 0, 100];\r\n        \r\n            if (this.state.activeStep !== activeStep) {\r\n                this.setState({\r\n                    activeStep\r\n                });\r\n            }\r\n            switch (activeStep) {\r\n                case '1':\r\n                    this.setState({\r\n                        progressValue: progessValue1\r\n                    });\r\n                    break;\r\n                case '2':\r\n                    this.setState({\r\n                        progressValue: progessValue2\r\n                    });\r\n                    break;\r\n                case '3':\r\n                    this.setState({\r\n                        progressValue: progessValue3\r\n                    });\r\n                    break;\r\n                default:\r\n                    console.log('default')\r\n            }\r\n        }\r\n    }\r\n\r\n    /* obtenir la liste de tous les modeles\r\n    onCollectionUpdate = (querySnapshot) => {\r\n        const modeles = [];\r\n        querySnapshot.forEach((docModele) => {\r\n          const {libelle, description, capacite, dimension} = docModele.data();\r\n          const {longueur, largeur, hauteur} = new Object(dimension);\r\n  \r\n          /* remplir la liste des modèles *\r\n          modeles.push({\r\n            keyModele: docModele.id,\r\n            libelle: libelle,\r\n            description: description,\r\n            capacite: capacite,\r\n            longueur: longueur,\r\n            hauteur: hauteur,\r\n            largeur: largeur,\r\n          });\r\n        });\r\n        this.setState({\r\n          modeles : modeles,\r\n          isLoading: false\r\n       });\r\n    } */\r\n\r\n    getModele = () => {\r\n        axios.get(url_modeles)\r\n        .then(res => {\r\n            const modeles = res.data.data.modeles\r\n            console.log(modeles)\r\n            this.setState({\r\n                modeles : modeles,\r\n                isLoading: false\r\n            })\r\n            console.log(this.state.modeles);\r\n        })\r\n        .catch((error) => {\r\n            console.log(\"get modele failed!\")\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getMachine = (id) => {\r\n        axios.get(`${url_machines}${id}`)\r\n        .then((res) => {\r\n            const machine = res.data.data.machine\r\n            const selectedModele = machine.modele\r\n            const libelle = selectedModele.libelle;\r\n            const { nom, zone, createdAt, level, status, localite, coordonnees } = machine;\r\n            const {pays, rue, ville, quartier} = new Object(localite)\r\n            const {latitude, longitude} = new Object(coordonnees)\r\n            //test recupération des coordonnées\r\n            console.log(latitude)\r\n            \r\n            console.log(res)\r\n            this.setState({\r\n                formMachine : {\r\n                    nom: nom,\r\n                    zone: zone,\r\n                    level : level,\r\n                    status : status,\r\n                    pays: pays,\r\n                    ville: ville,\r\n                    quartier: quartier,\r\n                    rue: rue,\r\n                    libelle: libelle,\r\n                    latitude: latitude,\r\n                    longitude: longitude,\r\n                    key: machine.key,\r\n                },\r\n                selectedModele : selectedModele,\r\n                createdAt: createdAt,\r\n            })\r\n            //heading nav\r\n            this.state.path.push({\r\n                label: nom,\r\n                value:''            \r\n            })\r\n        })\r\n        .catch((error) => {\r\n            console.log(\"No such machine!\", error);\r\n            swal(\"Erreur\", `Cher GreenManager, veillez selectionner une GreenBox pour obtenir ses informations ${error}`, \"warning\").then((value) => {\r\n                this.props.history.push(\"/dashboard_machine/\")\r\n            })\r\n        })\r\n    }\r\n\r\n    editMachine = () => {\r\n        const {key, nom, zone, pays, rue, ville, quartier, latitude, longitude } = this.state.formMachine;\r\n        const id_modele =this.state.selectedModele.key\r\n        console.log(id_modele)\r\n        const localite = {pays, rue, ville, quartier}\r\n        const coordonnees = {latitude, longitude}\r\n        \r\n        console.log(this.state.formMachine);\r\n        \r\n        axios.put(`${url_machines}${key}`, {\r\n            nom,\r\n            zone, \r\n            localite,\r\n            id_modele,\r\n            coordonnees, \r\n        })\r\n        .then((docRef) => {\r\n            this.setState({\r\n              formMachine : {            \r\n                nom: '',\r\n                zone: '',\r\n                pays: '',\r\n                ville:'',\r\n                quartier:'',\r\n                rue:'',\r\n                libelle: '',\r\n                latitude: '',\r\n                longitude: '',\r\n                key: '',\r\n              },\r\n              selectedModele : {},\r\n            });\r\n            //feedback\r\n            console.log(\"Une GreenBox modifiée!\");\r\n            swal(\"Super!\", \"Les modifications de la GreenBox ont bien été prise en compte\", \"success\").then((value) => {\r\n                this.props.history.push(\"/list_machine/\")\r\n            })\r\n        }).catch((error) => {\r\n          console.error(\"Error editing document: \", error);\r\n          swal(\"Desolée!\", \"Les informations de cette GreenBox n'ont pas pu être modifiée, veuillez vérifier vos paramètres de connexion\", \"success\")\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id\r\n        console.log(id);\r\n\r\n        // get modeles \r\n        this.getModele();\r\n        // get machine\r\n        this.getMachine(id);\r\n    }\r\n\r\n    /**\r\n      * Validate input using onChange event\r\n      * @param  {String} formName The name of the form in the state object\r\n      * @return {Function} a function used for the event\r\n    */\r\n    validateOnChange = event => {\r\n        const input = event.target;\r\n        const form = input.form;\r\n        const value = input.type === 'checkbox' ? input.checked : input.value;\r\n\r\n        const result = FormValidator.validate(input);\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                [input.name]: value,\r\n                errors: {\r\n                    ...this.state[form.name].errors,\r\n                    [input.name]: result\r\n                }\r\n            }\r\n        });\r\n\r\n        if (input.name == 'libelle') {\r\n            // update les informations sur le modele\r\n            const selectedModele = this.state.modeles.find(modele => modele.libelle == value)\r\n            console.log(selectedModele)       \r\n            this.setState({\r\n                selectedModele : selectedModele\r\n            })\r\n        }\r\n    };\r\n\r\n    /* Simplify error check */\r\n    hasError = (formName, inputName, method) => {\r\n        return  this.state[formName] &&\r\n                this.state[formName].errors &&\r\n                this.state[formName].errors[inputName] &&\r\n                this.state[formName].errors[inputName][method]\r\n    }    \r\n\r\n    handleSubmit = e => {\r\n        const form = e.target;\r\n        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))\r\n\r\n        const { errors, hasError } = FormValidator.bulkValidate(inputs)\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        console.log(hasError ? 'Form has errors. Check!' : 'Form Submitted!')\r\n        e.preventDefault();\r\n\r\n        this.editMachine();\r\n        \r\n        this.setState({\r\n            isFinish : true\r\n        })\r\n    }\r\n    \r\n    // Keep a reference to the form to access from the steps methods\r\n    formRef = node => (this.formMachineRef = node);\r\n\r\n    render() {\r\n        console.log(this.state.formMachine)\r\n        return (            \r\n            <ContentWrapper>\r\n                    <HeadingMenu path = {this.state.path}/>\r\n\r\n                    <Machine \r\n                    machine={this.state}\r\n                    formRef={this.formRef}\r\n                    toggleStep={this.toggleStep}\r\n                    validateOnChange = {this.validateOnChange}\r\n                    hasError={this.hasError}\r\n                    handleSubmit = {this.handleSubmit}\r\n                    swalCallback = {this.swalCallback}\r\n                    />\r\n            </ContentWrapper>\r\n            );\r\n    }\r\n\r\n}\r\n\r\nexport default EditMachine;\r\n"],"sourceRoot":""}