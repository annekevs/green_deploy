{"version":3,"sources":["components/Client/Layout/ContentWrapper.js","components/Common/HeadingMenu.js","components/Client/GreenUser/Liste.js"],"names":["ContentWrapper","props","className","unwrap","children","defaultProps","HeadingMenu","path","this","map","element","value","label","to","title","Component","SearchBar","Search","ExportCSVButton","CSVExport","DateFormatter","cell","row","created","Date","createdAt","toUTCString","OptionFormatter","rowIndex","key","selectRow","mode","clickToSelect","headingStyle","backgroundColor","color","ListClient","context","state","clients","defaultClients","isLoading","_columns","dataField","text","hidden","headerStyle","sort","formatter","isDummyField","axios","get","url_clients","then","res","data","setState","catch","error","console","log","options","custom","paginationSize","pageStartIndex","sizePerPage","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","paginationTotalRenderer","customTotal","sizePerPageList","length","totalSize","from","size","pagination","paginationFactory","paginationProps","paginationTableProps","keyField","columns","search","toolkitprops","searchProps","style","placeholder","bootstrap4","hover","baseProps","csvProps"],"mappings":"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","file":"static/js/34.b4bd2d6f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Wrapper element for template content\r\n */\r\nconst ContentWrapper = props =>(\r\n    <div className=\"content-wrapper\">\r\n        {props.unwrap ?\r\n            (<div className=\"unwrap\">{props.children}</div>)\r\n            :\r\n            (props.children)\r\n        }\r\n    </div>\r\n)\r\n\r\nContentWrapper.propTypes = {\r\n    /** add element with 'unwrap' class to expand content area */\r\n    unwrap: PropTypes.bool\r\n}\r\nContentWrapper.defaultProps = {\r\n    unwrap: false\r\n}\r\n\r\nexport default ContentWrapper;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass HeadingMenu extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        const path = this.props.path\r\n        return (\r\n            <div className=\"content-heading\">\r\n                    <ol className=\"breadcrumb\">\r\n                        {path.map((element) =>\r\n                            element.value == '' ? (\r\n                                <li className=\"breadcrumb-item active\"> { element.label } </li>\r\n                            ):(\r\n                                <li className=\"breadcrumb-item\"> \r\n                                    <Link to={element.value} title={element.label}> \r\n                                        { element.label } \r\n                                    </Link> \r\n                                </li>\r\n                            )\r\n                        )}\r\n                   </ol>\r\n            </div>\r\n                \r\n        )\r\n    }\r\n}\r\n\r\nexport default HeadingMenu;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport firebase from '../../../firebase';\r\nimport axios from 'axios';\r\nimport {url_clients} from '../../../urls'\r\n//\r\nimport ContentWrapper from '../Layout/ContentWrapper';\r\nimport { Progress, Button, Row, CardBody, CardHeader, CardFooter, Card, Form, FormGroup, Input } from 'reactstrap';\r\nimport Datetime from 'react-datetime';\r\nimport 'react-datetime/css/react-datetime.css';\r\nimport filterFactory,{textFilter, selectFilter, dateFilter, numberFilter} from 'react-bootstrap-table2-filter';\r\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport HeadingMenu from '../../Common/HeadingMenu';\r\nconst { SearchBar } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\n\r\n/**  Custom Formatter */\r\n// format de l'adresse de la machine\r\nfunction LocaliteFormatter(cell, row) {\r\n    const {lieu, pays, quartier, ville} = new Object(row.localite)\r\n    return (\r\n        <address>\r\n            <span> {quartier} </span>\r\n            <br/>\r\n            <small className=\"text-italic\"> {lieu} </small>\r\n        </address>\r\n    )\r\n}\r\n\r\n// format de la date\r\nfunction DateFormatter(cell, row) {\r\n    const date = new Date(row.createdAt)\r\n    const created = date.toUTCString()\r\n    \r\n    return(\r\n        <span> {created} </span> \r\n    )\r\n}\r\n\r\n// format du status de la machine\r\nfunction StatusFormatter(cell, row) {\r\n    if (row.status) {\r\n      return (<div className=\"circle circle-lg bg-success\" data-title=\"normal\"/>);\r\n    }\r\n\r\n    return (<div className=\"circle circle-lg bg-danger\" data-title=\"normal\"/>);\r\n}\r\n\r\n// format du niveau de remplissage de la machine\r\nfunction LevelFormatter(cell, row) {\r\n    let vari;\r\n    row.level == 0 ? (\r\n        vari = (<Progress color='gray-light' value='100'> 0% </Progress>)\r\n    ): row.level < 50? (\r\n        vari = (<Progress color='warning' value={cell}> {cell}% </Progress>)        \r\n    ) : row.level < 75? (\r\n        vari = (<Progress color='warning' value={cell}> {cell}% </Progress>)        \r\n    ) : ( \r\n        vari = (<Progress color='danger' value={cell}> {cell}% </Progress>)        \r\n    )\r\n    return vari;\r\n}\r\n\r\n// format des options sur les données\r\nfunction OptionFormatter(cell, row, rowIndex) {\r\n    return (\r\n        <div className=\"md-6 row \">\r\n            <div className='pl-3 pr-3'>\r\n                <Link to={`/show_machine/${row.key}`}><span className=\"fas fa-info-circle fa-1x text-info\"/> </Link>\r\n            </div>\r\n            <div className='pl-3'>\r\n                <Link to={`/edit_machine/${row.key}`}><span className=\"fas fa-pencil-alt fa-1x text-warning\"/> </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// action déclenchée lorsqu'on selectionne une ligne\r\nconst selectRow = {\r\n    mode: 'radio',\r\n    clickToSelect: true\r\n};\r\n\r\n// enable list filter\r\nlet listFilter = {\r\n    nameFilter: '',\r\n    zoneFilter: '',\r\n    adresseFilter: '',\r\n    statusFilter: '',\r\n    createdFilter: '',\r\n    levelFilter: '',\r\n}\r\n\r\nconst selectStatus = [\r\n    {\r\n        label: 'tous',\r\n        value: 'all'\r\n    },\r\n    {\r\n        label: 'en ligne',\r\n        value : true\r\n    },\r\n    {\r\n        label: 'hors ligne',\r\n        value: false\r\n    }\r\n]\r\n\r\n// header style for datatable\r\nconst headingStyle = {\r\n    backgroundColor : '#E5F1FB',\r\n    color: ''\r\n}\r\n\r\nclass ListClient extends Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = { \r\n            clients: [],\r\n            defaultClients: [],\r\n            path: [\r\n                { \r\n                    label: 'Home',\r\n                    value: '/dashboard_client',\r\n                },\r\n                { \r\n                    label: 'Clients',\r\n                    value: '/list_client',\r\n                },\r\n                { \r\n                    label: 'Liste',\r\n                    value: '',\r\n                }\r\n            ],\r\n            isLoading: true,\r\n        };\r\n        this._columns = [\r\n            {\r\n                dataField: 'key',\r\n                text: 'ID',\r\n                hidden: true\r\n            },\r\n            {\r\n                dataField: 'username',\r\n                text: 'Nom',\r\n                headerStyle: headingStyle,\r\n                /*filter: textFilter({\r\n                    placeholder: '',\r\n                    getFilter: (filter) => {\r\n                        listFilter.nameFilter = filter;\r\n                    }\r\n                }),*/\r\n                sort: true\r\n            },\r\n            {\r\n                dataField: 'wallet',\r\n                text: 'Wallet',\r\n                headerStyle: headingStyle,\r\n                /*filter: textFilter({\r\n                    getFilter: (filter) => {\r\n                        listFilter.zoneFilter = filter;\r\n                    }\r\n                }),*/                \r\n                sort : true\r\n            },\r\n            {\r\n                dataField: 'depot',\r\n                text: 'Dépôts',\r\n                headerStyle: headingStyle,\r\n                /*filter: textFilter({\r\n                    getFilter: (filter) => {\r\n                        listFilter.adressFilter = filter;\r\n                    }\r\n                }),*/   \r\n                hidden: true,             \r\n                sort: true\r\n            },\r\n            {\r\n                dataField: 'achat',\r\n                text: 'Achats',\r\n                headerStyle: headingStyle,\r\n                /*filter: textFilter({\r\n                    getFilter: (filter) => {\r\n                        listFilter.adressFilter = filter;\r\n                    }\r\n                }),*/\r\n                hidden: true,             \r\n                sort: true\r\n            },\r\n            {\r\n                dataField: 'somme_wallet',\r\n                text: 'Quantité collectées',\r\n                headerStyle: headingStyle,\r\n                /*filter: textFilter({\r\n                    getFilter: (filter) => {\r\n                        listFilter.adressFilter = filter;\r\n                    }\r\n                }),*/                \r\n                sort: true\r\n            },\r\n            {\r\n                dataField: 'createdAt',\r\n                text: 'Date de création',\r\n                headerStyle: headingStyle,\r\n                /*filter: dateFilter({\r\n                    className: 'row',\r\n                    getFilter(filter) {\r\n                        listFilter.dateFilter = filter;\r\n                    }\r\n                }),*/\r\n                formatter: DateFormatter,\r\n                sort: true\r\n            },\r\n            {\r\n                dataField:'option',\r\n                text: 'Option',\r\n                headerStyle: headingStyle,\r\n                isDummyField: true,\r\n                formatter: OptionFormatter\r\n            }\r\n        ];   \r\n    }\r\n    \r\n    /* 1. connect directly to firestore /\r\n    onCollectionUpdate = (querySnapshot) => {\r\n        const clients = [];\r\n        querySnapshot.forEach((doc) => {\r\n          const { nom, zone, r_modele, level, localite, created, status } = doc.data();\r\n          /* remplir le tableau /\r\n          clients.push({\r\n            key: doc.id,\r\n            doc, // DocumentSnapshot\r\n            nom,\r\n            zone,\r\n            localite,\r\n            level,\r\n            created,\r\n            status,\r\n          });\r\n        });\r\n        this.setState({\r\n          defaultclients: clients,\r\n          clients: clients, \r\n          isLoading: false,\r\n       });\r\n       console.log(this.state.defaultclients)\r\n    }\r\n    */\r\n    \r\n    componentDidMount() {\r\n        axios.get(url_clients)\r\n        .then((res) => {\r\n            const clients = res.data.data\r\n            this.setState({\r\n                clients: clients,\r\n                isLoading: false,\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            console.log(\"get clients failed!\", error)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const options = {\r\n            custom: true,\r\n            paginationSize: 4,\r\n            pageStartIndex: 1,\r\n            sizePerPage: 4,\r\n            firstPageText: 'First',\r\n            prePageText: 'Back',\r\n            nextPageText: 'Next',\r\n            lastPageText: 'Last',\r\n            nextPageTitle: 'First page',\r\n            prePageTitle: 'Pre page',\r\n            firstPageTitle: 'Next page',\r\n            lastPageTitle: 'Last page',\r\n            showTotal: true,\r\n            paginationTotalRenderer: customTotal,\r\n            sizePerPageList: [\r\n            {\r\n                text: '2', value: 2\r\n            }, \r\n            {\r\n                text: '5', value: 5\r\n            }, \r\n            {\r\n                text: 'All',\r\n                value: this.state.clients.length\r\n            }],\r\n            totalSize: this.state.clients.length\r\n        };\r\n        const isLoading = this.state.isLoading;\r\n\r\n        const contentTable = ({ paginationProps, paginationTableProps }) => (\r\n            <div>\r\n              <ToolkitProvider\r\n                keyField=\"key\"\r\n                columns={ this._columns }\r\n                data={ this.state.clients }\r\n                search           \r\n                >\r\n                {\r\n                  toolkitprops => (\r\n                    <div>\r\n                        {/*barre de recherche */}\r\n                        <Row>                                       \r\n                            {/*search bar */}\r\n                            <div className=\"col-xl-4 align-self-center ml-auto\">\r\n                                <div className=\"media\">\r\n                                    <div className=\"media-body\">\r\n                                        <SearchBar \r\n                                            { ...toolkitprops.searchProps }\r\n                                            className=\"custome-search-field\"\r\n                                            style={ { color: 'dark' } }\r\n                                            placeholder=\"Rechercher un nom, une zone, un niveau de remplissage\"                    \r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"align-self-start mr-2\">\r\n                                        <em className=\"fas fa-search fa-2x \"></em>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Row>\r\n                        {/*table */}\r\n                        <Card className=\"m-20\">\r\n                            <CardBody className=\"ml-5 mr-5\">\r\n                                <BootstrapTable\r\n                                bootstrap4\r\n                                hover\r\n                                selectRow={selectRow}\r\n                                { ...toolkitprops.baseProps }\r\n                                { ...paginationTableProps }\r\n                                />\r\n                            </CardBody>\r\n                            <CardFooter>\r\n                                \r\n                            </CardFooter>\r\n                        </Card>\r\n                        {/*Print or export */}\r\n                        <div className=\"col\">\r\n                            <div className=\"media m-10\">\r\n                                {/*export icon */}\r\n                                <ExportCSVButton { ...toolkitprops.csvProps } className=\"d-flex p-0 mr-5\" >\r\n                                    <Button color=\"secondary\">\r\n                                        <em className=\"fas fa-share text-info\"></em>\r\n                                    </Button>                          \r\n                                    <em className=\"align-self-center text-dark text-bold\">  Exporter au format CSV </em>\r\n                                </ExportCSVButton>\r\n                                {/*print icon */}\r\n                                <Link to=\"\" title=\"Imprimer la liste\" className=\"d-flex mr-3\">\r\n                                    <Button color=\"secondary\">\r\n                                        <em className=\"fa fa-print text-purple \"></em>\r\n                                    </Button>                                \r\n                                    <em className=\"align-self-center text-dark text-bold\">  Imprimer la liste </em>\r\n                                </Link>\r\n                                <div className=\"col-xl-3\">\r\n                                    .\r\n                                </div>\r\n                                {/*updated date */}\r\n                                <div className=\"col-xl-1 ml-auto p-0\">\r\n                                    <small className=\"mb-0 mt-1 text-dark\">Mis à jour le : 04/05/21 14:24:18</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>                        \r\n                    </div>\r\n                  )\r\n                }\r\n              </ToolkitProvider>\r\n                    {/*pagination list */}\r\n                        <div className=\"ml-auto col-xl-3\">\r\n                            <PaginationListStandalone { ...paginationProps } />\r\n                        </div>\r\n            </div>\r\n        );\r\n        \r\n        const customTotal = (from, to, size) => (\r\n            <span className=\"react-bootstrap-table-pagination-total\">\r\n              Showing { from } to { to } of { size } Results\r\n            </span>\r\n        );\r\n        \r\n        return  (\r\n            isLoading? (\r\n                <div> En cours de chargement... </div>\r\n            ):(\r\n                <ContentWrapper>\r\n                    <HeadingMenu path = {this.state.path}/>\r\n                    <PaginationProvider pagination={paginationFactory(options)}>\r\n                        { contentTable }\r\n                    </PaginationProvider>\r\n                </ContentWrapper>\r\n            )\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListClient;\r\n\r\n\r\n"],"sourceRoot":""}