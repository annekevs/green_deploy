{"version":3,"sources":["components/Machine/Layout/ContentWrapper.js","allconfig.js","components/Machine/Maps/Map.js","components/Machine/Maps/MapDirection.js","assets/Maps/728939_flag_yellow_location_map_marker_icon.svg","../node_modules/reactstrap/es/CardFooter.js","components/Machine/Maps/MapMachine.js"],"names":["ContentWrapper","props","className","unwrap","children","defaultProps","googleMapsApiKey","svgMarker","Component","path","fillColor","fillOpacity","strokeWeight","rotation","scale","MyMap","compose","withProps","googleMapURL","loadingElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","machines","length","center","zoom","onClick","map","machine","level","position","value","key","icon","Map","this","currentMachine","coordonnees","lat","lng","console","log","propTypes","tag","tagPropType","PropTypes","string","cssModule","object","CardFooter","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","MapMachine","onResize","state","customStyle","featureType","stylers","visibility","color","elementType","lightness","listeMachine","positions","push","parseFloat","latitude","longitude","nom","isSelect","containerStyle","currentPosition"],"mappings":"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","file":"static/js/32.b6ab09a7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Wrapper element for template content\n */\nconst ContentWrapper = props =>(\n    <div className=\"content-wrapper\">\n        {props.unwrap ?\n            (<div className=\"unwrap\">{props.children}</div>)\n            :\n            (props.children)\n        }\n    </div>\n)\n\nContentWrapper.propTypes = {\n    /** add element with 'unwrap' class to expand content area */\n    unwrap: PropTypes.bool\n}\nContentWrapper.defaultProps = {\n    unwrap: false\n}\n\nexport default ContentWrapper;\n","const googleMapsApiKey=\"AIzaSyB2gRtnm_h3PmxB6ZhZ1ZBpvwAYiQheb1Y\"\n\nexport { googleMapsApiKey}","/*global google*/\nimport React, {Component}  from 'react'\nimport { compose, withProps, lifecycle } from 'recompose'\nimport {\n  withScriptjs,\n  withState,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  DirectionsRenderer,\n} from 'react-google-maps'\nimport { googleMapsApiKey} from '../../../allconfig';\nimport MapDirection from './MapDirection';\nimport stationMarker from '../../../assets/Maps/728939_flag_yellow_location_map_marker_icon.svg';\n\nconst svgMarker = {\n  path: \"M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z\",\n  fillColor: \"green\",\n  fillOpacity: 1,\n  strokeWeight: 0,\n  rotation: 0,\n  scale: 2,\n  //anchor: new google.maps.Point(15, 30),\n};\n\n\nconst MyMap = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}&v=3.exp&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{ height: `450px` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withScriptjs,\n  withGoogleMap\n  )(props => {\n    \n    return (\n      props.machines.length? (\n        <GoogleMap\n          center={props.center}\n          zoom={props.zoom}\n          onClick={props.onClick}\n        > \n          {props.machines.map( (machine) => {\n            const test = (machine.level >= 50)? true : false\n            return (\n              test? (\n                <Marker key={machine.key} position={machine.value} onClick={props.onClick}/>\n              ):(\n                <Marker key={machine.key} position={machine.value} onClick={props.onClick} icon={svgMarker}/>\n              )\n            )\n          })}\n        </GoogleMap>\n      ):(\n        <GoogleMap center={props.center} zoom={props.zoom} />\n      )\n    )\n  }\n\n\n)\n\n// display directions\nconst start = {lat: 4.0004737, lng: 9.8057055}\nconst end = {lat: 4.001925800, lng: 9.76514100}\nconst fromTo = [start, end]\n\nclass Map extends Component {\n  \n  onClick = this.props.onClick\n  \n  render() {\n    const machines = this.props.machines\n    const zoom = this.props.zoom\n    const center = this.props.currentMachine? this.props.currentMachine.coordonnees : {lat: 4.0004737, lng: 9.8057055}\n    console.log(machines)\n    const positions = []\n    /*this.props.machines.map((machine) => {\n      positions.push({\n        lat: parseFloat(machine.coordonnees.latitude),\n        lng: parseFloat(machine.coordonnees.longitude)\n      })\n    })*/\n\n    return(\n      <div>\n        <MyMap \n          machines={machines} \n          zoom={zoom} \n          onClick={this.onClick}\n          center={center}\n          />\n        {/*<MapDirection\n        origin={this.props.currentPosition} \n        destination={end}\n        zoom={zoom}\n        />*/}\n      </div>\n    )\n  }\n}\n\nexport default Map;","/*global google*/\nimport React, { Component } from \"react\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  DirectionsRenderer\n} from \"react-google-maps\";\nimport { googleMapsApiKey} from '../../../allconfig';\n\nclass MapDirection extends Component {\n  state = {\n    directions: null\n  };\n\n  componentDidMount() {\n    const directionsService = new google.maps.DirectionsService();\n\n    let origin = this.props.origin? this.props.origin : {lat: 4.0004737, lng: 9.8057055}\n    let destination = this.props.destination? this.props.destination : {lat: 4.0004740,lng: 9.8057055}\n    //waypoints\n    const start = {lat: 4.0054737, lng: 9.8057055}\n    const end = {lat: 4.002925800, lng: 9.76514100}\n    const fromTo = [start, end]    \n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        waypoints: [\n          {\n             location: new google.maps.LatLng(4.0004937, 9.8757055)\n          },\n          {\n            location: new google.maps.LatLng(4.001855800, 9.76244100)\n          }\n        ],\n        travelMode: google.maps.TravelMode.DRIVING,\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  }\n  \n  render() {\n    const GoogleMapExample = withGoogleMap(props => (\n      <GoogleMap\n        defaultCenter={{ lat: 40.756795, lng: -73.954298 }}\n        defaultZoom={13}\n      >\n        <DirectionsRenderer\n          directions={this.state.directions}\n        />\n      </GoogleMap>\n    ));\n\n    const MapOk = () => (\n        <GoogleMapExample\n        containerElement={<div style={{ height: `400px`}} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    )\n\n    const MapLoader = withScriptjs(MapOk);\n\n    return (\n      <div>\n          <MapLoader\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}&v=3.exp&libraries=geometry,drawing,places`}\n            loadingElement={<div style={{ height: `100%` }} />}\n          />\n      </div>\n    );\n  }\n}\n\nexport default MapDirection;\n","export default __webpack_public_path__ + \"static/media/728939_flag_yellow_location_map_marker_icon.c4fa07d5.svg\";","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardFooter = function CardFooter(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-footer'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardFooter.propTypes = propTypes;\nCardFooter.defaultProps = defaultProps;\nexport default CardFooter;","/*global google*/\nimport React, { Component } from 'react';\nimport ContentWrapper from '../Layout/ContentWrapper';\nimport { Card, CardHeader, CardBody, CardFooter } from 'reactstrap';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { googleMapsApiKey} from '../../../allconfig';\nimport Map from './Map';\n\nconst svgMarker = {\n    path: \"M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z\",\n    fillColor: \"green\",\n    fillOpacity: 1,\n    strokeWeight: 0,\n    rotation: 0,\n    scale: 2,\n    //anchor: new google.maps.Point(15, 30),\n};\n\nconst FullMarker = props => (\n    <Marker \n    key={props.key} \n    position={props.position}\n    onClick={props.onClick}\n    />\n)\n\nconst LowMarker = props => (\n    <Marker \n    key={props.key} \n    position={props.position}\n    onClick={props.onClick}\n    icon={svgMarker}\n    title={props.title}\n    />\n)\n\n// Demo with multiple markers\nconst DemoMapCustomMarkers = props => { \n    console.log(props)\n    const id = (Math.random() + 1).toString(36).substring(5)\n    return (\n        props.customMarkers.length ? (\n            <GoogleMap\n                id={id}\n                mapContainerStyle={props.containerStyle} \n                zoom={props.zoom} \n                center={props.center}\n            >\n                {props.customMarkers.map( (machine) => {\n                    const test = (machine.level >= 50)? true : false\n                    return (\n                        test? (\n                            <FullMarker \n                            key={machine.key} \n                            position={machine.value}\n                            onClick={props.onClick}\n                            //title={machine.nom}\n                            />\n                       ):(\n                            <LowMarker \n                            key={machine.key} \n                            position={machine.value}\n                            onClick={props.onClick}\n                            />  \n                        )\n                    )}\n                )}\n\n            </GoogleMap>\n        ):(\n            <GoogleMap mapContainerStyle={props.containerStyle} zoom={props.zoom} center={props.center}/>\n        )\n    )\n}\n\n\n//default value for lat, long\nconst defaultPosition = {\n    lat: 4.0004737, \n    lng: 9.8057055\n}\n\nclass MapMachine extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            center: {},\n            customStyle: [\n                {featureType:'water',stylers:[{visibility:'on'},{color:'#bdd1f9'}]},\n                {featureType:'all',elementType:'labels.text.fill',stylers:[{color:'#334165'}]},\n                {featureType:'landscape',stylers:[{color:'#e9ebf1'}]},\n                {featureType:'road.highway',elementType:'geometry',stylers:[{color:'#c5c6c6'}]},\n                {featureType:'road.arterial',elementType:'geometry',stylers:[{color:'#fff'}]},\n                {featureType:'road.local',elementType:'geometry',stylers:[{color:'#fff'}]},\n                {featureType:'transit',elementType:'geometry',stylers:[{color:'#d8dbe0'}]},\n                {featureType:'poi',elementType:'geometry',stylers:[{color:'#cfd5e0'}]},\n                {featureType:'administrative',stylers:[{visibility:'on'},{lightness:33}]},\n                {featureType:'poi.park',elementType:'labels',stylers:[{visibility:'on'},\n                {lightness:20}]},{featureType:'road',stylers:[{color:'#d8dbe0',lightness:20}]}\n            ]\n        }\n    }\n\n   /* componentDidMount() {\n        //console.log(this.props)\n        this.setState({ center : this.props.currentMachine.coordonnees})\n    }*/\n\n    onResize = this.props.onResize;\n\n    render() {\n        // get all position\n        const machines = this.props.listeMachine\n        //console.log(machines)\n        const positions = []\n        machines.map((machine) => {\n            positions.push({\n                key: machine.key,\n                value :{\n                    lat: parseFloat(machine.coordonnees.latitude),\n                    lng: parseFloat(machine.coordonnees.longitude)\n                },\n                nom: machine.nom,\n                level: machine.level,\n            })\n        })\n        const isSelect = this.props.isSelect\n        const zoom = this.props.zoom\n        \n        const containerStyle = this.props.containerStyle\n\n        return (\n            <ContentWrapper>\n                <Card className=\"card-default\">\n                    <CardBody>\n                        <Map\n                            machines={positions}\n                            currentMachine={this.props.currentMachine}\n                            zoom={zoom}\n                            onClick={this.props.onClick}\n                            currentPosition={this.props.currentPosition}\n                        />\n                    </CardBody>\n                    <CardFooter className=\"ml-auto\">\n                        <span className=\"fas fa-compress pl-auto text-dark fa-2x\" onClick={this.onResize}> </span>\n                    </CardFooter>\n                </Card>\n            </ContentWrapper>\n        )\n       /* return (\n            <LoadScript\n                googleMapsApiKey = {googleMapsApiKey}\n            >\n                <ContentWrapper>\n                    <Card className=\"card-default\">\n                        <CardBody>\n                            <DemoMapCustomMarkers \n                             customMarkers={positions}\n                             center={center}\n                             zoom = {zoom} \n                             containerStyle={containerStyle}\n                             onClick={this.props.onClick}\n                            />\n                        </CardBody>\n                        <CardFooter className=\"ml-auto\">\n                            <span className=\"fas fa-compress pl-auto text-dark fa-2x\" onClick={this.onResize}> </span>\n                        </CardFooter>\n                    </Card>\n             </ContentWrapper>\n            </LoadScript>\n        );*/\n\n        //return(<div> Just for test</div>)\n    }\n\n}\n\nexport default MapMachine;\n\n"],"sourceRoot":""}