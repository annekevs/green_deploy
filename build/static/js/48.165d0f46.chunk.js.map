{"version":3,"sources":["components/Machine/CRUD/Add.js"],"names":["defaultPosition","AddMachine","getModele","axios","get","url_modeles","then","res","modeles","data","console","log","setState","isLoading","state","catch","error","addMachine","formMachine","nom","zone","pays","rue","ville","quartier","latitude","longitude","id_modele","selectedModele","key","localite","coordonnees","post","url_machines","docRef","libelle","swal","value","props","history","push","toggleStep","activeStep","form","formMachineRef","tabPane","document","getElementById","inputs","slice","call","querySelectorAll","FormValidator","bulkValidate","errors","hasError","name","progressValue","validateOnChange","event","input","target","type","checked","result","validate","find","modele","formName","inputName","method","handleSubmit","e","elements","filter","i","includes","nodeName","preventDefault","formRef","node","path","label","this","machine","Component"],"mappings":"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","file":"static/js/48.165d0f46.chunk.js","sourcesContent":["/**editer les informations d'une machine */\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport {url_machines, url_modeles} from '../../../urls'\nimport ContentWrapper from '../Layout/ContentWrapper';\nimport Machine from './AddUpMachine';\nimport FormValidator from '../../Common/FormValidator';\nimport swal from 'sweetalert';\nimport HeadingMenu from '../HeadingMenu';\n\nconst stepNavitemStyle = {\n    backgroundColor: 'bg-gray-dark'\n};\n\n//default value for lat, long\nconst defaultPosition = {\n    lat: 0, \n    lng: 0\n}\n\nclass AddMachine extends Component {\n    constructor() {\n        super();        \n        //this.ref = firebase.firestore().collection('machines');\n        //this.refModele = firebase.firestore().collection('modeles');\n        //this.unsubscribe = null;\n        this.state = {\n            formMachine : {\n                nom: '',\n                zone: '',\n                pays: 'Cameroun',\n                ville:'',\n                quartier:'',\n                rue:'',\n                libelle:'',\n                latitude: defaultPosition.lat,\n                longitude: defaultPosition.lng,\n                key: ''\n            },\n            modeles: [],\n            isLoading: true,\n            selectedModele: {},\n            activeStep: '1',\n            progressValue: [100, 0, 0],\n            path: [\n                { \n                    label: 'Home',\n                    value: '/dashboard_machine',\n                },\n                { \n                    label: 'Machine',\n                    value: '/list_machine',\n                },\n                { \n                    label: 'Ajouter une machine',\n                    value: '',\n                }\n            ]\n        };\n    }\n\n    // obtenir la liste de tous les modeles\n    /*\n    onCollectionUpdate = (querySnapshot) => {\n        const modeles = [];\n        querySnapshot.forEach((docModele) => {\n          const {libelle, description, capacite, dimension} = docModele.data();\n  \n          /* remplir la liste des modèles /\n          modeles.push({\n            keyModele: docModele.id,\n            libelle: libelle,\n            description: description,\n            capacite: capacite,\n            dimension: dimension,\n          });\n        });\n        this.setState({\n          modeles : modeles,\n          isLoading: false\n       });\n    }*/\n\n    componentDidMount() {\n        //this.unsubscribe = this.refModele.onSnapshot(this.onCollectionUpdate);\n        // get modeles \n        this.getModele();\n    }\n\n    getModele = () => {\n        axios.get(url_modeles)\n        .then(res => {\n            const modeles = res.data.data.modeles\n            console.log(modeles)\n            this.setState({\n                modeles : modeles,\n                isLoading: false\n            })\n            console.log(this.state.modeles);\n        })\n        .catch((error) => {\n            console.log(\"get modele failed!\")\n            console.log(error)\n        })\n    }\n\n    addMachine = () => {\n        const { nom, zone, pays, rue, ville, quartier, latitude, longitude } = this.state.formMachine;\n        const id_modele =this.state.selectedModele.key\n        console.log(id_modele)\n        const localite = {pays, rue, ville, quartier}\n        const coordonnees = {latitude, longitude}\n        \n        console.log(this.state.formMachine);\n        \n        axios.post(url_machines, {\n            nom,\n            zone,\n            localite,\n            id_modele,\n            coordonnees, \n        })\n        .then((docRef) => {\n            this.setState({\n              formMachine : {            \n                nom: '',\n                zone: '',\n                pays: '',\n                ville:'',\n                quartier:'',\n                rue:'',\n                libelle: '',\n                latitude: '',\n                longitude: '',\n                key: '',\n              },\n              selectedModele : {},\n            });\n            //feedback\n            console.log(\"Une GreenBox!\");\n            swal(\"Felicitation!\", \"Cher GreenManager, vous venez d'ajouter une GreenBox de plus\", \"success\").then((value) => {\n                this.props.history.push(\"/list_machine/\")\n            }) \n        })\n        .catch((error) => {\n          console.error(\"Error adding document: \", error);\n          swal(\"Desolée!\", \"Cette GreenBox n'a pu être ajoutée, veuillez vérifier vos paramètres de connexion\", \"warning\")\n        });\n    }\n\n    toggleStep = activeStep => () => {\n        // For submit we can obtain the form from the event\n        // but for each step we need a global ref to the element\n        const form = this.formMachineRef;\n        // To validate only the inputs in the current steps, we use an id to query the tabPane\n        // and then find all form elements for the current step only.\n        const tabPane = document.getElementById('tabPane' + this.state.activeStep);\n        const inputs = [].slice.call(tabPane.querySelectorAll('input,select'));\n        // Run validation of inputs\n        const { errors, hasError } = FormValidator.bulkValidate(inputs);\n\n        // Update state so the validation message are shown/hidden\n        this.setState({\n            [form.name]: {\n                ...this.state[form.name],\n                errors\n            }\n        });\n\n        // and prevent change the if form is not valid\n        if (!hasError) {\n            const progessValue1 = [100, 0, 0];\n            const progessValue2 = [0, 100, 0];\n            const progessValue3 = [0, 0, 100];\n            \n            if (this.state.activeStep !== activeStep) {\n                this.setState({\n                    activeStep\n                });\n            }\n            \n            switch (activeStep) {\n                case '1':\n                    this.setState({\n                        progressValue: progessValue1\n                    });\n                    break;\n                case '2':\n                    this.setState({\n                        progressValue: progessValue2\n                    });\n                    break;\n                case '3':\n                    this.setState({\n                        progressValue: progessValue3\n                    });\n                    break;\n                default:\n                    console.log('default')\n            }\n        }\n    }\n\n    /**\n      * Validate input using onChange event\n      * @param  {String} formName The name of the form in the state object\n      * @return {Function} a function used for the event\n    */\n    validateOnChange = event => {\n        const input = event.target;\n        const form = input.form;\n        const value = input.type === 'checkbox' ? input.checked : input.value;\n\n        const result = FormValidator.validate(input);\n\n        this.setState({\n            [form.name]: {\n                ...this.state[form.name],\n                [input.name]: value,\n                errors: {\n                    ...this.state[form.name].errors,\n                    [input.name]: result\n                }\n            }\n        });\n\n        if (input.name == 'libelle') {\n            // update les informations sur le modele\n            const selectedModele = this.state.modeles.find(modele => modele.libelle == value)\n            console.log(selectedModele)       \n            this.setState({\n                selectedModele : selectedModele\n            })\n        }\n    };\n\n    /* Simplify error check */\n    hasError = (formName, inputName, method) => {\n        return  this.state[formName] &&\n                this.state[formName].errors &&\n                this.state[formName].errors[inputName] &&\n                this.state[formName].errors[inputName][method]\n    }    \n\n    handleSubmit = e => {\n        const form = e.target;\n        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))\n\n        const { errors, hasError } = FormValidator.bulkValidate(inputs)\n\n        this.setState({\n            [form.name]: {\n                ...this.state[form.name],\n                errors\n            }\n        });\n\n        console.log(hasError ? 'Form has errors. Check!' : 'Form Submitted!')\n        e.preventDefault();\n        \n        this.addMachine();     \n    }\n    \n    // Keep a reference to the form to access from the steps methods\n    formRef = node => (this.formMachineRef = node);    \n\n    render() {\n        console.log(this.state.formMachine)\n        return (            \n            <ContentWrapper>\n                <HeadingMenu path = {this.state.path}/>\n                <Machine \n                machine={this.state}\n                formRef={this.formRef}\n                toggleStep={this.toggleStep}\n                validateOnChange = {this.validateOnChange}\n                hasError={this.hasError}\n                handleSubmit = {this.handleSubmit} />\n            </ContentWrapper>\n            );\n    }\n\n}\n\nexport default AddMachine;\n"],"sourceRoot":""}