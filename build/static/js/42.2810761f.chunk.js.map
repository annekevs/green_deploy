{"version":3,"sources":["allconfig.js","components/Machine/Maps/Map.js","components/Machine/Maps/MapDirection.js","assets/Maps/728939_flag_yellow_location_map_marker_icon.svg"],"names":["googleMapsApiKey","svgMarker","Component","path","fillColor","fillOpacity","strokeWeight","rotation","scale","MyMap","compose","withProps","googleMapURL","loadingElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","props","machines","length","center","zoom","onClick","map","machine","level","position","value","key","icon","Map","this","currentMachine","coordonnees","lat","lng","console","log"],"mappings":"iGAAA,sCAAMA,EAAiB,2C,qHCejBC,GCLqBC,YCVZ,IFeG,CAChBC,KAAM,qSACNC,UAAW,QACXC,YAAa,EACbC,aAAc,EACdC,SAAU,EACVC,MAAO,IAKHC,EAAQC,YACZC,YAAU,CACRC,aAAa,+CAAD,OAAiDZ,IAAjD,8CACZa,eAAgB,qBAAKC,MAAO,CAAEC,OAAO,WACrCC,iBAAkB,qBAAKF,MAAO,CAAEC,OAAO,WACvCE,WAAY,qBAAKH,MAAO,CAAEC,OAAO,YAEnCG,eACAC,gBARYT,EASV,SAAAU,GAEA,OACEA,EAAMC,SAASC,OACb,cAAC,YAAD,CACEC,OAAQH,EAAMG,OACdC,KAAMJ,EAAMI,KACZC,QAASL,EAAMK,QAHjB,SAKGL,EAAMC,SAASK,KAAK,SAACC,GAEpB,OADcA,EAAQC,OAAS,GAG3B,cAAC,SAAD,CAA0BC,SAAUF,EAAQG,MAAOL,QAASL,EAAMK,SAArDE,EAAQI,KAErB,cAAC,SAAD,CAA0BF,SAAUF,EAAQG,MAAOL,QAASL,EAAMK,QAASO,KAAM/B,GAApE0B,EAAQI,UAM7B,cAAC,YAAD,CAAWR,OAAQH,EAAMG,OAAQC,KAAMJ,EAAMI,UAa/CS,E,4MAEJR,QAAU,EAAKL,MAAMK,Q,4CAErB,WACE,IAAMJ,EAAWa,KAAKd,MAAMC,SACtBG,EAAOU,KAAKd,MAAMI,KAClBD,EAASW,KAAKd,MAAMe,eAAgBD,KAAKd,MAAMe,eAAeC,YAAc,CAACC,IAAK,UAAWC,IAAK,WACxGC,QAAQC,IAAInB,GASZ,OACE,8BACE,cAACZ,EAAD,CACEY,SAAUA,EACVG,KAAMA,EACNC,QAASS,KAAKT,QACdF,OAAQA,U,GAvBArB,aAmCH+B","file":"static/js/42.2810761f.chunk.js","sourcesContent":["const googleMapsApiKey=\"AIzaSyB2gRtnm_h3PmxB6ZhZ1ZBpvwAYiQheb1Y\"\n\nexport { googleMapsApiKey}","/*global google*/\nimport React, {Component}  from 'react'\nimport { compose, withProps, lifecycle } from 'recompose'\nimport {\n  withScriptjs,\n  withState,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  DirectionsRenderer,\n} from 'react-google-maps'\nimport { googleMapsApiKey} from '../../../allconfig';\nimport MapDirection from './MapDirection';\nimport stationMarker from '../../../assets/Maps/728939_flag_yellow_location_map_marker_icon.svg';\n\nconst svgMarker = {\n  path: \"M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z\",\n  fillColor: \"green\",\n  fillOpacity: 1,\n  strokeWeight: 0,\n  rotation: 0,\n  scale: 2,\n  //anchor: new google.maps.Point(15, 30),\n};\n\n\nconst MyMap = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}&v=3.exp&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{ height: `450px` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withScriptjs,\n  withGoogleMap\n  )(props => {\n    \n    return (\n      props.machines.length? (\n        <GoogleMap\n          center={props.center}\n          zoom={props.zoom}\n          onClick={props.onClick}\n        > \n          {props.machines.map( (machine) => {\n            const test = (machine.level >= 50)? true : false\n            return (\n              test? (\n                <Marker key={machine.key} position={machine.value} onClick={props.onClick}/>\n              ):(\n                <Marker key={machine.key} position={machine.value} onClick={props.onClick} icon={svgMarker}/>\n              )\n            )\n          })}\n        </GoogleMap>\n      ):(\n        <GoogleMap center={props.center} zoom={props.zoom} />\n      )\n    )\n  }\n\n\n)\n\n// display directions\nconst start = {lat: 4.0004737, lng: 9.8057055}\nconst end = {lat: 4.001925800, lng: 9.76514100}\nconst fromTo = [start, end]\n\nclass Map extends Component {\n  \n  onClick = this.props.onClick\n  \n  render() {\n    const machines = this.props.machines\n    const zoom = this.props.zoom\n    const center = this.props.currentMachine? this.props.currentMachine.coordonnees : {lat: 4.0004737, lng: 9.8057055}\n    console.log(machines)\n    const positions = []\n    /*this.props.machines.map((machine) => {\n      positions.push({\n        lat: parseFloat(machine.coordonnees.latitude),\n        lng: parseFloat(machine.coordonnees.longitude)\n      })\n    })*/\n\n    return(\n      <div>\n        <MyMap \n          machines={machines} \n          zoom={zoom} \n          onClick={this.onClick}\n          center={center}\n          />\n        {/*<MapDirection\n        origin={this.props.currentPosition} \n        destination={end}\n        zoom={zoom}\n        />*/}\n      </div>\n    )\n  }\n}\n\nexport default Map;","/*global google*/\nimport React, { Component } from \"react\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  DirectionsRenderer\n} from \"react-google-maps\";\nimport { googleMapsApiKey} from '../../../allconfig';\n\nclass MapDirection extends Component {\n  state = {\n    directions: null\n  };\n\n  componentDidMount() {\n    const directionsService = new google.maps.DirectionsService();\n\n    let origin = this.props.origin? this.props.origin : {lat: 4.0004737, lng: 9.8057055}\n    let destination = this.props.destination? this.props.destination : {lat: 4.0004740,lng: 9.8057055}\n    //waypoints\n    const start = {lat: 4.0054737, lng: 9.8057055}\n    const end = {lat: 4.002925800, lng: 9.76514100}\n    const fromTo = [start, end]    \n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        waypoints: [\n          {\n             location: new google.maps.LatLng(4.0004937, 9.8757055)\n          },\n          {\n            location: new google.maps.LatLng(4.001855800, 9.76244100)\n          }\n        ],\n        travelMode: google.maps.TravelMode.DRIVING,\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  }\n  \n  render() {\n    const GoogleMapExample = withGoogleMap(props => (\n      <GoogleMap\n        defaultCenter={{ lat: 40.756795, lng: -73.954298 }}\n        defaultZoom={13}\n      >\n        <DirectionsRenderer\n          directions={this.state.directions}\n        />\n      </GoogleMap>\n    ));\n\n    const MapOk = () => (\n        <GoogleMapExample\n        containerElement={<div style={{ height: `400px`}} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    )\n\n    const MapLoader = withScriptjs(MapOk);\n\n    return (\n      <div>\n          <MapLoader\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${googleMapsApiKey}&v=3.exp&libraries=geometry,drawing,places`}\n            loadingElement={<div style={{ height: `100%` }} />}\n          />\n      </div>\n    );\n  }\n}\n\nexport default MapDirection;\n","export default __webpack_public_path__ + \"static/media/728939_flag_yellow_location_map_marker_icon.c4fa07d5.svg\";"],"sourceRoot":""}