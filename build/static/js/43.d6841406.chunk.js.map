{"version":3,"sources":["components/Machine/CRUD/Add.js"],"names":["defaultPosition","AddMachine","getModele","axios","get","url_modeles","then","res","modeles","data","console","log","setState","isLoading","state","catch","error","addMachine","formMachine","nom","zone","pays","rue","ville","quartier","latitude","longitude","id_modele","selectedModele","key","localite","coordonnees","post","url_machines","docRef","libelle","swal","value","props","history","push","toggleStep","activeStep","form","formMachineRef","tabPane","document","getElementById","inputs","slice","call","querySelectorAll","FormValidator","bulkValidate","errors","hasError","name","progressValue","validateOnChange","event","input","target","type","checked","result","validate","find","modele","formName","inputName","method","handleSubmit","e","elements","filter","i","includes","nodeName","preventDefault","formRef","node","path","label","this","machine","Component"],"mappings":"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","file":"static/js/43.d6841406.chunk.js","sourcesContent":["/**editer les informations d'une machine */\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {url_machines, url_modeles} from '../../../urls'\r\nimport ContentWrapper from '../Layout/ContentWrapper';\r\nimport Machine from './AddUpMachine';\r\nimport FormValidator from '../../Common/FormValidator';\r\nimport swal from 'sweetalert';\r\nimport HeadingMenu from '../HeadingMenu';\r\n\r\nconst stepNavitemStyle = {\r\n    backgroundColor: 'bg-gray-dark'\r\n};\r\n\r\n//default value for lat, long\r\nconst defaultPosition = {\r\n    lat: 0, \r\n    lng: 0\r\n}\r\n\r\nclass AddMachine extends Component {\r\n    constructor() {\r\n        super();        \r\n        //this.ref = firebase.firestore().collection('machines');\r\n        //this.refModele = firebase.firestore().collection('modeles');\r\n        //this.unsubscribe = null;\r\n        this.state = {\r\n            formMachine : {\r\n                nom: '',\r\n                zone: '',\r\n                pays: 'Cameroun',\r\n                ville:'',\r\n                quartier:'',\r\n                rue:'',\r\n                libelle:'',\r\n                latitude: defaultPosition.lat,\r\n                longitude: defaultPosition.lng,\r\n                key: ''\r\n            },\r\n            modeles: [],\r\n            isLoading: true,\r\n            selectedModele: {},\r\n            activeStep: '1',\r\n            progressValue: [100, 0, 0],\r\n            path: [\r\n                { \r\n                    label: 'Home',\r\n                    value: '/dashboard_machine',\r\n                },\r\n                { \r\n                    label: 'Machine',\r\n                    value: '/list_machine',\r\n                },\r\n                { \r\n                    label: 'Ajouter une machine',\r\n                    value: '',\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    // obtenir la liste de tous les modeles\r\n    /*\r\n    onCollectionUpdate = (querySnapshot) => {\r\n        const modeles = [];\r\n        querySnapshot.forEach((docModele) => {\r\n          const {libelle, description, capacite, dimension} = docModele.data();\r\n  \r\n          /* remplir la liste des modèles /\r\n          modeles.push({\r\n            keyModele: docModele.id,\r\n            libelle: libelle,\r\n            description: description,\r\n            capacite: capacite,\r\n            dimension: dimension,\r\n          });\r\n        });\r\n        this.setState({\r\n          modeles : modeles,\r\n          isLoading: false\r\n       });\r\n    }*/\r\n\r\n    componentDidMount() {\r\n        //this.unsubscribe = this.refModele.onSnapshot(this.onCollectionUpdate);\r\n        // get modeles \r\n        this.getModele();\r\n    }\r\n\r\n    getModele = () => {\r\n        axios.get(url_modeles)\r\n        .then(res => {\r\n            const modeles = res.data.data.modeles\r\n            console.log(modeles)\r\n            this.setState({\r\n                modeles : modeles,\r\n                isLoading: false\r\n            })\r\n            console.log(this.state.modeles);\r\n        })\r\n        .catch((error) => {\r\n            console.log(\"get modele failed!\")\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    addMachine = () => {\r\n        const { nom, zone, pays, rue, ville, quartier, latitude, longitude } = this.state.formMachine;\r\n        const id_modele =this.state.selectedModele.key\r\n        console.log(id_modele)\r\n        const localite = {pays, rue, ville, quartier}\r\n        const coordonnees = {latitude, longitude}\r\n        \r\n        console.log(this.state.formMachine);\r\n        \r\n        axios.post(url_machines, {\r\n            nom,\r\n            zone,\r\n            localite,\r\n            id_modele,\r\n            coordonnees, \r\n        })\r\n        .then((docRef) => {\r\n            this.setState({\r\n              formMachine : {            \r\n                nom: '',\r\n                zone: '',\r\n                pays: '',\r\n                ville:'',\r\n                quartier:'',\r\n                rue:'',\r\n                libelle: '',\r\n                latitude: '',\r\n                longitude: '',\r\n                key: '',\r\n              },\r\n              selectedModele : {},\r\n            });\r\n            //feedback\r\n            console.log(\"Une GreenBox!\");\r\n            swal(\"Felicitation!\", \"Cher GreenManager, vous venez d'ajouter une GreenBox de plus\", \"success\").then((value) => {\r\n                this.props.history.push(\"/list_machine/\")\r\n            }) \r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error adding document: \", error);\r\n          swal(\"Desolée!\", \"Cette GreenBox n'a pu être ajoutée, veuillez vérifier vos paramètres de connexion\", \"warning\")\r\n        });\r\n    }\r\n\r\n    toggleStep = activeStep => () => {\r\n        // For submit we can obtain the form from the event\r\n        // but for each step we need a global ref to the element\r\n        const form = this.formMachineRef;\r\n        // To validate only the inputs in the current steps, we use an id to query the tabPane\r\n        // and then find all form elements for the current step only.\r\n        const tabPane = document.getElementById('tabPane' + this.state.activeStep);\r\n        const inputs = [].slice.call(tabPane.querySelectorAll('input,select'));\r\n        // Run validation of inputs\r\n        const { errors, hasError } = FormValidator.bulkValidate(inputs);\r\n\r\n        // Update state so the validation message are shown/hidden\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        // and prevent change the if form is not valid\r\n        if (!hasError) {\r\n            const progessValue1 = [100, 0, 0];\r\n            const progessValue2 = [0, 100, 0];\r\n            const progessValue3 = [0, 0, 100];\r\n            \r\n            if (this.state.activeStep !== activeStep) {\r\n                this.setState({\r\n                    activeStep\r\n                });\r\n            }\r\n            \r\n            switch (activeStep) {\r\n                case '1':\r\n                    this.setState({\r\n                        progressValue: progessValue1\r\n                    });\r\n                    break;\r\n                case '2':\r\n                    this.setState({\r\n                        progressValue: progessValue2\r\n                    });\r\n                    break;\r\n                case '3':\r\n                    this.setState({\r\n                        progressValue: progessValue3\r\n                    });\r\n                    break;\r\n                default:\r\n                    console.log('default')\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n      * Validate input using onChange event\r\n      * @param  {String} formName The name of the form in the state object\r\n      * @return {Function} a function used for the event\r\n    */\r\n    validateOnChange = event => {\r\n        const input = event.target;\r\n        const form = input.form;\r\n        const value = input.type === 'checkbox' ? input.checked : input.value;\r\n\r\n        const result = FormValidator.validate(input);\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                [input.name]: value,\r\n                errors: {\r\n                    ...this.state[form.name].errors,\r\n                    [input.name]: result\r\n                }\r\n            }\r\n        });\r\n\r\n        if (input.name == 'libelle') {\r\n            // update les informations sur le modele\r\n            const selectedModele = this.state.modeles.find(modele => modele.libelle == value)\r\n            console.log(selectedModele)       \r\n            this.setState({\r\n                selectedModele : selectedModele\r\n            })\r\n        }\r\n    };\r\n\r\n    /* Simplify error check */\r\n    hasError = (formName, inputName, method) => {\r\n        return  this.state[formName] &&\r\n                this.state[formName].errors &&\r\n                this.state[formName].errors[inputName] &&\r\n                this.state[formName].errors[inputName][method]\r\n    }    \r\n\r\n    handleSubmit = e => {\r\n        const form = e.target;\r\n        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))\r\n\r\n        const { errors, hasError } = FormValidator.bulkValidate(inputs)\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        console.log(hasError ? 'Form has errors. Check!' : 'Form Submitted!')\r\n        e.preventDefault();\r\n        \r\n        this.addMachine();     \r\n    }\r\n    \r\n    // Keep a reference to the form to access from the steps methods\r\n    formRef = node => (this.formMachineRef = node);    \r\n\r\n    render() {\r\n        console.log(this.state.formMachine)\r\n        return (            \r\n            <ContentWrapper>\r\n                <HeadingMenu path = {this.state.path}/>\r\n                <Machine \r\n                machine={this.state}\r\n                formRef={this.formRef}\r\n                toggleStep={this.toggleStep}\r\n                validateOnChange = {this.validateOnChange}\r\n                hasError={this.hasError}\r\n                handleSubmit = {this.handleSubmit} />\r\n            </ContentWrapper>\r\n            );\r\n    }\r\n\r\n}\r\n\r\nexport default AddMachine;\r\n"],"sourceRoot":""}